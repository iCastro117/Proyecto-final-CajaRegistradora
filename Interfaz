import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

public class Principal extends JFrame {

    // Componentes de la interfaz
    private JPanel pnlPrincipal;
    private JLabel lblNombre;
    private JTextField txtNombre;
    private JLabel lblCodigo;
    private JTextField txtCodigo;
    private JLabel lblPrecio;
    private JTextField txtPrecio;
    private JTextField txtDescuento;
    private JLabel lblDescuento;
    private JCheckBox chbAceptaDescuento;
    private JButton btnGuardar;
    private JButton btnVerHistorial;
    private JButton btnCalcularTotal;
    private List<Venta> historial;

    // Constructor de la clase ☺
    public Principal() {
        super("Caja Registradora");
        getContentPane().setBackground(Color.pink);
        setLayout(new GridLayout(8, 2, 10, 10));

        // Configuración de etiquetas y campos de texto ☺
        add(new JLabel("Nombre:"));
        txtNombre = new JTextField();
        add(txtNombre);

        add(new JLabel("Código:"));
        txtCodigo = new JTextField();
        add(txtCodigo);

        add(new JLabel("Precio:"));
        txtPrecio = new JTextField();
        add(txtPrecio);

        add(new JLabel("Descuento:"));
        txtDescuento = new JTextField();
        add(txtDescuento);

        add(new JLabel("Acepta Descuento:"));
        chbAceptaDescuento = new JCheckBox();
        add(chbAceptaDescuento);

        // Configuración de botones y sus acciones ☺
        btnGuardar = new JButton("Guardar");
        btnGuardar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                guardarVenta();
            }
        });
        add(btnGuardar);

        btnVerHistorial = new JButton("Ver Historial");
        btnVerHistorial.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                verHistorial();
            }
        });
        add(btnVerHistorial);

        btnCalcularTotal = new JButton("Calcular Total");
        btnCalcularTotal.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                calcularTotal();
            }
        });
        add(btnCalcularTotal);

        // Inicialización del historial ☺
        historial = new ArrayList<>();

        // Configuración de la ventana
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    // Método para guardar una venta ☺
    private void guardarVenta() {
        String nombre = txtNombre.getText();
        String codigo = txtCodigo.getText();
        double precio = obtenerDouble(txtPrecio.getText());
        double descuento = obtenerDouble(txtDescuento.getText());
        boolean aceptaDescuento = chbAceptaDescuento.isSelected();

        double total = precio - (aceptaDescuento ? (descuento / 100.0) * precio : 0);

        DecimalFormat df = new DecimalFormat("#.00");
        String totalFormateado = df.format(total);

        Venta venta = new Venta(nombre, codigo, precio, descuento, aceptaDescuento, total);
        historial.add(venta);

        System.out.println(venta);

        JOptionPane.showMessageDialog(this, "Venta guardada. Total: $" + totalFormateado);
    }

    // Método para ver el historial de ventas ☺
    private void verHistorial() {
        StringBuilder historialTexto = new StringBuilder("Historial de Ventas:\n");
        for (Venta venta : historial) {
            historialTexto.append(venta.toString()).append("\n");
        }

        JOptionPane.showMessageDialog(this, historialTexto.toString(), "Historial de Ventas", JOptionPane.INFORMATION_MESSAGE);
    }

    // Método para calcular el total de todas las ventas ☺
    private void calcularTotal() {
        double totalVentas = 0;

        for (Venta venta : historial) {
            totalVentas += venta.getTotal();
        }

        DecimalFormat df = new DecimalFormat("#.00");
        String totalFormateado = df.format(totalVentas);

        JOptionPane.showMessageDialog(this, "Total de todas las ventas: $" + totalFormateado, "Total de Compra", JOptionPane.INFORMATION_MESSAGE);
    }

    // Método para obtener un valor double seguro desde una cadena ☺
    private double obtenerDouble(String texto) {
        try {
            return Double.parseDouble(texto);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Valor no válido. Se utilizará 0.", "Error", JOptionPane.ERROR_MESSAGE);
            return 0.0;
        }
    }

    // Clase Venta para representar cada venta con detalles
    private static class Venta {
        private String nombre;
        private String codigo;
        private double precio;
        private double descuento;
        private boolean aceptaDescuento;
        private double total;

        // Constructor de la clase Venta ☺
        public Venta(String nombre, String codigo, double precio, double descuento, boolean aceptaDescuento, double total) {
            this.nombre = nombre;
            this.codigo = codigo;
            this.precio = precio;
            this.descuento = descuento;
            this.aceptaDescuento = aceptaDescuento;
            this.total = total;
        }

        // Método para obtener el total de la venta
        public double getTotal() {
            return total;
        }

        // Método para representar la venta como una cadena
        @Override
        public String toString() {
            return String.format("Nombre: %s, Código: %s, Precio: %.2f, Descuento: %.2f, Acepta Descuento: %s, Total: %.2f",
                    nombre, codigo, precio, descuento, aceptaDescuento, total);
        }
    }

    // Método main para ejecutar la aplicación
    public static void main(String[] args) {
        new Principal();
    }
}

